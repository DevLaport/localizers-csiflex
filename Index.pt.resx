<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="breadcrumb1" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="breadcrumb2" xml:space="preserve">
    <value>Integrations</value>
  </data>
  <data name="breadcrumb3" xml:space="preserve">
    <value>Connections</value>
  </data>
  <data name="btnCancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="btnConnect" xml:space="preserve">
    <value>Connect</value>
  </data>
  <data name="btnConnected" xml:space="preserve">
    <value>Connected</value>
  </data>
  <data name="btnSave" xml:space="preserve">
    <value>Salvar</value>
  </data>
  <data name="btnSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="changeViewModel" xml:space="preserve">
    <value>Alterar modelo de visualização</value>
  </data>
  <data name="dropDeleteConnection" xml:space="preserve">
    <value>Delete Connection</value>
  </data>
  <data name="dropDisable" xml:space="preserve">
    <value>Disable</value>
  </data>
  <data name="dropEditConnection" xml:space="preserve">
    <value>Edit Connection</value>
  </data>
  <data name="dropMachines" xml:space="preserve">
    <value>Machines</value>
  </data>
  <data name="dropShifts" xml:space="preserve">
    <value>Shifts</value>
  </data>
  <data name="lblLike" xml:space="preserve">
    <value>Like</value>
  </data>
  <data name="lblShare" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="liDNC" xml:space="preserve">
    <value>DNC</value>
  </data>
  <data name="liMonitoring" xml:space="preserve">
    <value>Monitoring</value>
  </data>
  <data name="liOthersDevices" xml:space="preserve">
    <value>OthersDevices</value>
  </data>
  <data name="paragraph1" xml:space="preserve">
    <value>Adapters</value>
  </data>
  <data name="paragraph2" xml:space="preserve">
    <value>Connections Type</value>
  </data>
  <data name="showAll" xml:space="preserve">
    <value>Mostrar todos</value>
  </data>
  <data name="showDisabled" xml:space="preserve">
    <value>Mostrar todos inativos</value>
  </data>
  <data name="showEnabled" xml:space="preserve">
    <value>Mostrar todos ativos</value>
  </data>
  <data name="titleConfigItem" xml:space="preserve">
    <value>Configurações</value>
  </data>
  <data name="titleENETDNC" xml:space="preserve">
    <value>eNETDNC Monitoring</value>
  </data>
  <data name="titleFocas" xml:space="preserve">
    <value>Focas DNC</value>
  </data>
  <data name="titleIMonnit" xml:space="preserve">
    <value>iMonnit Cloud Sensor Management Software</value>
  </data>
  <data name="titleMTconnect" xml:space="preserve">
    <value>MT Connect</value>
  </data>
  <data name="titleRunning" xml:space="preserve">
    <value>O serviço está rodando</value>
  </data>
  <data name="titleNotRunning" xml:space="preserve">
    <value>O serviço está parado</value>
  </data>
  <data name="txteNetDNC" xml:space="preserve">
    <value>At it’s core eNETDNC provides a way to link CNC machines to your network. This can be done both wired or wirelessly, depending on the scenario. Data, like G-code programs, can then be shared between the machine and computer. This can eliminate the need to manually transfer files back and forth. The files can be located on a central server that everyone can access, preventing confusion when it comes to things like revisions. With eNETDNC the operator can send/receive data using the CNC control, so they don’t have to leave the machine. The eNETDNC system also helps with file organization, storage, and backup. With Smart File Compare file revisions are managed and the original files are preserved. All of the uploads are reviewed for changes and stored for approval. If you don’t have a DNC system already, or have one that isn’t working properly, you could be undermining your profit margin. For that reason, the return on investment for an eNETDNC system can be very fast. Most companies realize a payback period of less than 6 months. Some return on investment calculations revealed paybacks in just six weeks.</value>
  </data>
  <data name="txtFocas" xml:space="preserve">
    <value>FOCAS Automation Solutions (FAS), based on the FANUC FOCAS API, are designed to simplify the connectivity of third-party hardware or software to the FANUC CNC, and they allow for easy transmission and collection of data from a FANUC CNC. FAS products are either purely software based solutions or propriety software and hardware solutions. All of the FAS solutions below are available in a 30 day trial version from your local FANUC America CNC salesperson or by contacting the FANUC America CNC options team.</value>
  </data>
  <data name="txtIMonnit" xml:space="preserve">
    <value>iMonnit is a cloud based mobile internet platform and central hub for managing Monnit and ALTA products. All data is secured on dedicated servers operating Microsoft SQL Server. This online user interface is where all your device settings can be arranged, supervised, and modified to reflect your unique environment. You can access iMonnit on an internet browser simply by typing www.imonnit.com into the address bar. In addition, you can also download the iMonnit App to your smartphone or tablet. Start with the basic version or upgrade to iMonnit Premiere to enjoy the full features your Monnit experience can offer.</value>
  </data>
  <data name="txtMTConnect" xml:space="preserve">
    <value>PLUG-AND-PLAY INTERCONNECTIVITY FOR ENHANCED PRODUCTIVITY When it comes to your machine tool, even the tiniest modifications can have a significant impact on overall efficiency. Data is king, and that’s what MTConnect provides: detailed information over time to help you maximize performance. By establishing an open and expandable channel of communication for plug-and-play interconnectivity between all of your devices, equipment, and systems, MTConnect allows these different sources to exchange and understand each other's data. That common communication is facilitated by using widely accepted XML and Internet Protocol technology to provide you with near real-time data from your entire operation, data you can access via a computer interface of your choosing. Thanks to our control’s open-architecture configuration, any Okuma machine tool with the OSP-P control is MTConnect-ready. In fact, installation is as easy as connecting an Ethernet cable.</value>
  </data>
  <data name="titleInstalled" xml:space="preserve">
    <value>Instalado</value>
  </data>
  <data name="titleNotInstalled" xml:space="preserve">
    <value>Instalar</value>
  </data>
  <data name="titleEnabledDisabled" xml:space="preserve">
    <value>Ativar/Desativar</value>
  </data>
</root>